HlslPad

2011 年 11 月
pmansato
pmansato@kanazawa-net.ne.jp
http://www.kanazawa-net.ne.jp/~pmansato/

【 HlslPad とは】
エフェクトファイル（.fx ファイル）は、HLSL "High Level Shading Language" を使って作成しますが、HlslPad は HLSL の編集結果をテストするためのツールです。

【使い方】
初めて HlslPad を使う場合は、HlslPad を起動したあと、すぐに [コンパイル] してください。右側の画像がグレースケールになります。HlslPad の機能はこれだけです。

Shader を適用するテスト用の画像はすでに表示されているはずですが、ほかのものがよければ画像ファイルを選択してください。2 つの画像のうち、左側は常にオリジナルのままです。Shader は右側の画像に適用します。

フォーム左上のテキストボックスに HLSL を書き込んだあと、[コンパイル] し、コンパイルが正常終了すると、右側の画像に Shader を適用します。コンパイル時にエラーがあれば、フォーム左下のテキストボックスにエラーの内容を表示します。

元の画像に戻す場合は [リセット] してください。ただし、コンパイルのたびにリセットする必要はありません。

メニューの [PS ファイルとして出力する] を選択すると、コンパイル後の内容を PS ファイルとしてカレントディレクトリに出力します。出力ファイル名は常に output.ps です。ファイル名を指定することはできません。

メニューの [画像として出力する] を選択すると、Shader 適用前後の画像を JPEG ファイルとして保存します。ファイル名は output.jpg です。

フォーム右下の ［Shader Model］は、Shader のバージョンを選択します。.NET Framework 4.0 では PS2.0 と PS3.0 の一部が有効です。

なお、HlslPad を終了時の位置とサイズを初期化ファイルに記録し、次の起動時に位置とサイズを再現します。また、フォームのサイズを変更すると、画像もそれに対応するサイズに変更できます。

【HLSL の基本】
HLSL は C 風の構文を使いますが、C/C++ や C# とは明らかに異なります。どちらかというと、アセンブリ言語のチョット高級版という感じです。HLSL の解説は別の機会を考えていますので、ここでは基本的なことだけを書きます。

1. 大文字と小文字の区別はない
  キーワードおよび変数などの識別名に対して、大文字と小文字の区別はありません。C/C++ で伝統的なすべて小文字を使う方法でもいいですが、C# 的にはカメル式、つまり、ワードの先頭の文字だけを大文字にすることをすすめます。また、意味のあるキーワードをすべて大文字にするのは視認性が高くなる効果があります。

以下のコードは、私のホームページで公開しているものですが、カメル式の変数名 blankColor やキーワードの TEXCOORD などを参考にしてください。

	float threshold : register(c0);

	sampler2D input : register(s0);
	float4 blankColor : register(c1);

	float4 main(float2 uv : TEXCOORD) : COLOR
	{
	  float4 color = tex2D(input, uv);
	  float intensity = (color.r + color.g + color.b) / 3;

	  float4 result;

	  if (intensity > threshold)
	  {
	    result = color;
	  }
	  else
	  {
	    result = blankColor;
	  }

	  return result;
	}

2. 文字コード
  エフェクトファイル（.fx ファイル）の文字コードは、ASCII でなければなりません。shift-jis は英数字と記号に限っては ASCII と同じなので、使えます。ただし、日本語（漢字など）を含むとコンパイルエラーになります。

3. グローバル変数とローカル変数
  上記のコードの threshold、input、blankColor はグルーバル変数で、宣言時に初期値を与えることはできません。値の設定はレジスタを直接設定しなければなりません。一方、color や intensity はローカル変数です。

4. グローバル変数の変更
  HlslPad は汎用の ShaderEffect オブジェクトを使います。こうすることで、エフェクトファイルに対応する ShaderEffect クラスから派生するクラスを定義する手間を省略しています。これには Input プロパティと定数レジスタの C0 と C1 に対応するプロパティだけを設定しています。

  グローバル変数はレジスタを直接操作することで変更可能です。HlslPad では C0 と C1 レジスタだけを実行時に変更可能にしました。フォーム右下の 2 つのスライダコントロールはそれぞれ C0 と C1 とに対応しています。値は 0.0 〜 1.0 の範囲の数値です。もし、100 とかの大きな値が必要な場合はローカル変数を使えば解決できます。たとえば、グローバル変数 someValue を次のように宣言しているとします。

  float someValue : register(C0);

main 関数内で対応するローカル変数を宣言し、100 を乗算します。

  float localValue = someValue * 100;

これをグローバル変数の代わりに使えば、スライダコントロールでグローバル変数を実行時に変更可能にできます。

先に説明したとおり、HlslPad では C0 と C1 のみを変更可能にしています。C2 を使いたいとか、float4 型のカラー値を直接設定したい場合には対応していません。しかし、一時的にローカル変数として設定すればテストすることは可能です。値の設定は手入力になりますが、この方法はどういうケースにも適用可能です。たとえば、本来はグローバル変数として backColor を COLOR 型の C2 に登録したい場合、以下のようにすればテストできます。

  float4 backColor : register(C2); ← 本来こうしたい

グローバル変数を // でコメントアウトし、あらためて ローカル変数として宣言します。値は手入力で設定してください。

	float4 main(float2 uv : TEXCOORD) : COLOR
	{
		float4 backColor = { 0.4, 0.6, 0.8, 1.0 };
		....
	}

5. メイン関数名
  HlslPad ではメイン関数名として、main だけが有効です。

6. 座標値
  上記のコードの uv は TEXCOORD 型を受け取りますが、これは (0.0, 0.0) 〜 (1.0, 1.0) の範囲の数値で、操作対象の UIElement オブジェクトの左上隅を原点とする座標値です。

7. Shader のバージョン
  HlslPad では 2.0 と 3.0 を指定できるようにしました。.NET Framework 4.0 では 3.0 も制限付きで使用可能ですが、通常は 2.0 にすることをすすめます。もちろん、2.0 で正常にコンパイルできない場合は 3.0 を試してください。WEB サイトなどで公開されているサンプルコードの中には 3.0 でなければならない場合がありますので。

【著作権】
HlslPad.exe はフリーウエアです。どなたでも自由にお使いください。

HlslPad のソースコードは私が公開している NETClass または WPFClass のユーザーさんに公開します。ZIP ファイルを解凍するためのパスワードは NETClass と同じになっています。なお、プロジェクトは Visual Studio 2010  C# で作りました。

−以上−
